/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Gig as PrismaGig,
  Order as PrismaOrder,
  Review as PrismaReview,
  Category as PrismaCategory,
} from "@prisma/client";

export class GigServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GigCountArgs, "select">): Promise<number> {
    return this.prisma.gig.count(args);
  }

  async gigs(args: Prisma.GigFindManyArgs): Promise<PrismaGig[]> {
    return this.prisma.gig.findMany(args);
  }
  async gig(args: Prisma.GigFindUniqueArgs): Promise<PrismaGig | null> {
    return this.prisma.gig.findUnique(args);
  }
  async createGig(args: Prisma.GigCreateArgs): Promise<PrismaGig> {
    return this.prisma.gig.create(args);
  }
  async updateGig(args: Prisma.GigUpdateArgs): Promise<PrismaGig> {
    return this.prisma.gig.update(args);
  }
  async deleteGig(args: Prisma.GigDeleteArgs): Promise<PrismaGig> {
    return this.prisma.gig.delete(args);
  }

  async findOrders(
    parentId: string,
    args: Prisma.OrderFindManyArgs
  ): Promise<PrismaOrder[]> {
    return this.prisma.gig
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .orders(args);
  }

  async findReviews(
    parentId: string,
    args: Prisma.ReviewFindManyArgs
  ): Promise<PrismaReview[]> {
    return this.prisma.gig
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reviews(args);
  }

  async getCategory(parentId: string): Promise<PrismaCategory | null> {
    return this.prisma.gig
      .findUnique({
        where: { id: parentId },
      })
      .category();
  }
}
